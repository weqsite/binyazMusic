import React, { useState, useEffect, useRef, useCallback } from 'react';
import ReactDOM from 'react-dom/client';
import { initializeApp } from 'firebase/app';
import { getAuth, signInAnonymously, signInWithCustomToken, onAuthStateChanged, signOut } from 'firebase/auth';
import { getFirestore, collection, onSnapshot, query, addDoc, serverTimestamp, orderBy, doc, deleteDoc, updateDoc } from 'firebase/firestore';

// --- Global Styles (Inlined from index.css) ---
// Note: Tailwind directives (@tailwind base, etc.) are processed by Vite/Tailwind setup, 
// but custom CSS and font imports are placed here inside a style tag for consolidation.
const GlobalStyles = () => (
    // FIX: Removed non-standard jsx="true" attribute that caused the internal React error.
    <style>{`
        /* Tailwind CSS setup - assumes external processing */
        @tailwind base;
        @tailwind components;
        @tailwind utilities;

        /* Custom font import for better Persian display (Vazirmatn) */
        @import url('https://fonts.googleapis.com/css2?family=Vazirmatn:wght@400;700;900&display=swap');

        body { 
            font-family: 'Vazirmatn', sans-serif; 
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            background-color: #0a0a0a;
        }

        /* Custom styling for the range slider thumb to match the yellow theme */
        .range-lg::-webkit-slider-thumb {
            -webkit-appearance: none;
            appearance: none;
            background: #fbbf24; /* Amber-400 */
            border-radius: 9999px;
            height: 16px;
            width: 16px;
            cursor: pointer;
            margin-top: -6px; /* Adjust based on track height */
        }
        .range-lg::-moz-range-thumb {
            background: #fbbf24; /* Amber-400 */
            border-radius: 9999px;
            height: 16px;
            width: 16px;
            cursor: pointer;
        }
    `}</style>
);


// --- Configuration & Constants ---
const ADMIN_USERNAME = 'amirbinyaz'; 
const ENCODED_PASSWORD = 'MDkxNzg0NTg1MjZhbWlycGM='; // 09178458526amirpc
const PUBLIC_MUSIC_COLLECTION = 'music_tracks';

// Initial constants for Firebase setup
const firebaseConfig = typeof window.__firebase_config !== 'undefined' ? JSON.parse(window.__firebase_config) : {};
const appId = typeof window.__app_id !== 'undefined' ? window.__app_id : 'default-app-id';
const initialAuthToken = typeof window.__initial_auth_token !== 'undefined' ? window.__initial_auth_token : null;

const MOCK_AUDIO_URL = "https://www.soundhelix.com/examples/mp3/SoundHelix-Song-1.mp3";
const DEFAULT_COVER_IMAGE = "https://placehold.co/192x192/0a0a0a/ffc107?text=Music+Cover";


/**
 * Utility function to decode Base64 strings (for obfuscated credentials).
 */
const decodeBase64 = (encoded) => {
    try {
        return typeof Buffer !== 'undefined' 
            ? Buffer.from(encoded, 'base64').toString('utf8') 
            : atob(encoded);
    } catch (e) {
        console.error("Failed to decode base64:", e);
        return ""; 
    }
};

const ADMIN_PASSWORD = decodeBase64(ENCODED_PASSWORD); 

// --- Utility Components and Hooks ---

/**
 * Custom hook to manage Firebase initialization and authentication state.
 */
const useFirebase = () => {
    const [db, setDb] = useState(null);
    const [auth, setAuth] = useState(null);
    const [userId, setUserId] = useState(null);
    const [isLoading, setIsLoading] = useState(true);

    useEffect(() => {
        try {
            if (!firebaseConfig || Object.keys(firebaseConfig).length === 0) {
                 console.error("Firebase config is missing. App will run in development mode without cloud features.");
                 setIsLoading(false);
                 return;
            }

            const app = initializeApp(firebaseConfig);
            const firestore = getFirestore(app);
            const authentication = getAuth(app);

            setDb(firestore);
            setAuth(authentication);

            const unsubscribe = onAuthStateChanged(authentication, async (user) => {
                if (user) {
                    setUserId(user.uid);
                } else {
                    if (initialAuthToken) {
                        try {
                            await signInWithCustomToken(authentication, initialAuthToken);
                        } catch (e) {
                            console.error("Error signing in with custom token:", e);
                            await signInAnonymously(authentication);
                        }
                    } else {
                         await signInAnonymously(authentication);
                    }
                }
                setIsLoading(false);
            });

            return () => unsubscribe();
        } catch (error) {
            console.error("Error initializing Firebase:", error);
            setIsLoading(false);
        }
    }, []);

    return { db, auth, userId, isLoading };
};

/**
 * Icon component for a play button (SVG)
 */
const PlayIcon = () => (
    <svg xmlns="http://www.w3.org/2000/svg" className="h-10 w-10 fill-current text-black" viewBox="0 0 24 24">
        <path d="M8 5v14l11-7z" />
    </svg>
);

/**
 * Icon component for a pause button (SVG)
 */
const PauseIcon = () => (
    <svg xmlns="http://www.w3.org/2000/svg" className="h-10 w-10 fill-current text-black" viewBox="0 0 24 24">
        <path d="M6 19h4V5H6v14zm8-14v14h4V5h-4z" />
    </svg>
);

/**
 * Icon component for the music note (SVG)
 */
const MusicNoteIcon = ({ className = 'h-6 w-6' }) => (
    <svg xmlns="http://www.w3.org/2000/svg" className={className} viewBox="0 0 24 24" fill="currentColor">
        <path d="M12 3c-4.97 0-9 4.03-9 9s4.03 9 9 9 9-4.03 9-9-4.03-9-9-9zm-1 15v-5.26c-1.47.64-3.1.9-4.78.71-.85-.1-1.63-.37-2.31-.77.13 1.95.84 3.76 2.05 5.38.7.9 1.5 1.7 2.38 2.38.25.25.56.42.92.54.4.14.83.22 1.28.22.84 0 1.62-.23 2.31-.62v-1.84c-1.42.34-2.92.52-4.44.52zM18.8 13.5c-.6.6-1.32 1.1-2.12 1.48-1.47.7-3.1.96-4.78.78-.85-.1-1.63-.37-2.31-.77v-2.32c.68.4 1.46.67 2.31.77 1.68.18 3.31-.08 4.78-.78.8-.38 1.52-.88 2.12-1.48.5-.5.85-1.07 1.05-1.68.2-.61.2-1.25 0-1.86-.2-.61-.55-1.18-1.05-1.68-.6-.6-1.32-1.1-2.12-1.48-1.47-.7-3.1-.96-4.78-.78-.85.1-1.63.37-2.31.77v-2.32c.68-.4 1.46.67 2.31.77 1.68-.18 3.31.08 4.78.78.8.38 1.52.88 2.12 1.48.5.5.85 1.07 1.05 1.68.2.61.2 1.25 0 1.86-.2.61-.55 1.18-1.05 1.68z"/>
    </svg>
);

/**
 * Icon component for the settings gear (SVG)
 */
const GearIcon = () => (
    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="text-gray-400 hover:text-amber-400 transition-colors">
        <path d="M12.22 2h-.44a2 2 0 0 0-2 2v.44a2 2 0 0 0-2 2H4a2 2 0 0 0-2 2v.44a2 2 0 0 0 2 2h.44a2 2 0 0 0 2 2v.44a2 2 0 0 0 2 2h.44a2 2 0 0 0 2 2h.44a2 2 0 0 0 2-2v-.44a2 2 0 0 0 2-2h.44a2 2 0 0 0 2-2v-.44a2 2 0 0 0 2-2h.44a2 2 0 0 0 2-2v-.44a2 2 0 0 0-2-2h-.44a2 2 0 0 0-2-2v-.44a2 2 0 0 0-2-2h-.44a2 2 0 0 0-2-2z"/><circle cx="12" cy="12" r="3"/>
    </svg>
);


// --- Component Definitions (PlayerControls, MusicPlayer, AdminPanel) ---

/**
 * Manages the current track playback and controls.
 */
const PlayerControls = ({ currentTrack, onNext, onPrev }) => {
    const audioRef = useRef(null);
    const [isPlaying, setIsPlaying] = useState(false);
    const [currentTime, setCurrentTime] = useState(0);
    const [duration, setDuration] = useState(0);

    const coverImage = currentTrack?.imageUrl || DEFAULT_COVER_IMAGE;

    useEffect(() => {
        if (currentTrack && audioRef.current) {
            audioRef.current.src = currentTrack.audioUrl;
            audioRef.current.load();
            audioRef.current.play().then(() => setIsPlaying(true)).catch(e => console.error("Auto-play failed:", e));
        }
    }, [currentTrack]);

    const togglePlayPause = () => {
        if (!audioRef.current) return;
        if (isPlaying) {
            audioRef.current.pause();
        } else {
            audioRef.current.play().catch(e => console.error("Play failed:", e));
        }
        setIsPlaying(!isPlaying);
    };

    const handleTimeUpdate = () => {
        if (audioRef.current) {
            setCurrentTime(audioRef.current.currentTime);
        }
    };

    const handleLoadedMetadata = () => {
        if (audioRef.current) {
            setDuration(audioRef.current.duration);
        }
    };

    const handleEnded = () => {
        setIsPlaying(false);
        onNext(); 
    };

    const formatTime = (time) => {
        if (isNaN(time) || time === Infinity) return "0:00";
        const minutes = Math.floor(time / 60);
        const seconds = Math.floor(time % 60).toString().padStart(2, '0');
        return `${minutes}:${seconds}`;
    };

    if (!currentTrack) {
        return (
            <div className="p-4 flex flex-col items-center justify-center bg-gray-900 text-gray-400 rounded-xl shadow-lg border border-gray-800">
                <MusicNoteIcon className="h-10 w-10 text-amber-500 mb-2" />
                <p className="text-sm text-gray-400">لطفاً آهنگی را برای پخش انتخاب کنید.</p>
            </div>
        );
    }

    return (
        <div className="bg-gray-900 p-4 sm:p-6 rounded-xl shadow-2xl flex flex-col items-center space-y-4 border border-gray-800">
            <audio
                ref={audioRef}
                onTimeUpdate={handleTimeUpdate}
                onLoadedMetadata={handleLoadedMetadata}
                onEnded={handleEnded}
            ></audio>
            
            {/* Cover Image */}
            <img 
                src={coverImage}
                alt={`${currentTrack.title} cover`}
                className="w-36 h-36 sm:w-48 sm:h-48 object-cover rounded-xl shadow-xl border-2 border-amber-400"
                onError={(e) => { e.target.onerror = null; e.target.src = DEFAULT_COVER_IMAGE; }} 
            />

            <div className="text-center w-full">
                <h3 className="text-xl font-bold text-white max-w-xs truncate mx-auto">{currentTrack.title}</h3>
                <p className="text-sm text-amber-400 truncate">{currentTrack.artist}</p>
            </div>

            {/* Progress Bar */}
            <div className="flex items-center space-x-2 rtl:space-x-reverse w-full max-w-sm">
                <span className="text-xs text-gray-400">{formatTime(currentTime)}</span>
                <input
                    type="range"
                    min="0"
                    max={duration}
                    value={currentTime}
                    onChange={(e) => {
                        if (audioRef.current) {
                            audioRef.current.currentTime = e.target.value;
                            setCurrentTime(e.target.value);
                        }
                    }}
                    className="flex-grow h-1 bg-gray-700 rounded-lg appearance-none cursor-pointer range-lg"
                />
                <span className="text-xs text-gray-400">{formatTime(duration)}</span>
            </div>

            {/* Playback Controls */}
            <div className="flex justify-center space-x-8">
                <button
                    onClick={onPrev}
                    className="p-2 text-amber-400 hover:text-amber-300 transition-colors"
                    title="آهنگ قبلی"
                >
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-8 w-8" viewBox="0 0 24 24" fill="currentColor">
                        <path d="M6 6h2v12H6zm3.5 6l8.5 6V6l-8.5 6z" />
                    </svg>
                </button>
                <button
                    onClick={togglePlayPause}
                    className="p-3 bg-amber-500 rounded-full shadow-lg hover:bg-amber-400 transition-colors transform hover:scale-105 focus:outline-none focus:ring-4 focus:ring-amber-400 focus:ring-opacity-50"
                    title={isPlaying ? "مکث" : "پخش"}
                >
                    {isPlaying ? <PauseIcon /> : <PlayIcon />}
                </button>
                <button
                    onClick={onNext}
                    className="p-2 text-amber-400 hover:text-amber-300 transition-colors"
                    title="آهنگ بعدی"
                >
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-8 w-8" viewBox="0 0 24 24" fill="currentColor">
                        <path d="M18 6l-8.5 6 8.5 6V6zM6 6h2v12H6V6z" />
                    </svg>
                </button>
            </div>
        </div>
    );
};

/**
 * Main application interface for music listening.
 */
const MusicPlayer = ({ db, musicList, setMusicList, currentTrack, setCurrentTrack }) => {
    const [error, setError] = useState('');

    const publicMusicPath = db ? `artifacts/${appId}/public/data/${PUBLIC_MUSIC_COLLECTION}` : null;

    useEffect(() => {
        if (!db || !publicMusicPath) return;

        const musicQuery = query(
            collection(db, publicMusicPath),
            orderBy('createdAt', 'desc')
        );

        const unsubscribe = onSnapshot(musicQuery, (snapshot) => {
            const tracks = snapshot.docs.map(doc => ({
                id: doc.id,
                ...doc.data()
            }));
            setMusicList(tracks);

            if (!currentTrack && tracks.length > 0) {
                setCurrentTrack(tracks[0]);
            }
        }, (e) => {
            console.error("Error fetching music list:", e);
            setError("خطا در بارگیری لیست آهنگ‌ها. اتصال اینترنت خود را بررسی کنید.");
        });

        return () => unsubscribe();
    }, [db, setCurrentTrack, currentTrack, setMusicList, publicMusicPath]);

    const playTrack = useCallback((track) => {
        setCurrentTrack(track);
    }, [setCurrentTrack]);

    const handleNext = () => {
        if (musicList.length === 0) return;
        const currentIndex = musicList.findIndex(t => t.id === currentTrack?.id);
        const nextIndex = (currentIndex + 1) % musicList.length;
        playTrack(musicList[nextIndex]);
    };

    const handlePrev = () => {
        if (musicList.length === 0) return;
        const currentIndex = musicList.findIndex(t => t.id === currentTrack?.id);
        const prevIndex = (currentIndex - 1 + musicList.length) % musicList.length;
        playTrack(musicList[prevIndex]);
    };

    return (
        <div className="p-4 sm:p-8 space-y-8 max-w-4xl mx-auto w-full">
            <h1 className="text-4xl font-extrabold text-white text-center">Binyaz Music</h1>
            <p className="text-center text-amber-400">مجموعه موسیقی منتخب شما</p>

            <PlayerControls
                currentTrack={currentTrack}
                onNext={handleNext}
                onPrev={handlePrev}
            />

            {error && <div className="p-4 bg-red-900 text-red-300 rounded-lg text-center border border-red-700">{error}</div>}

            <div className="space-y-3">
                <h2 className="text-2xl font-semibold text-white border-b border-gray-700 pb-2 mb-4">لیست آهنگ‌ها ({musicList.length})</h2>
                {musicList.length === 0 ? (
                    <p className="text-gray-400 text-center p-6 bg-gray-900 rounded-xl border border-gray-800">هیچ آهنگی برای پخش موجود نیست. لطفاً از پنل مدیریت، آهنگ اضافه کنید.</p>
                ) : (
                    <ul className="bg-gray-900 rounded-xl shadow-xl divide-y divide-gray-800 border border-gray-800">
                        {musicList.map((track) => (
                            <li
                                key={track.id}
                                className={`flex items-center justify-between p-4 cursor-pointer transition-all ${currentTrack?.id === track.id ? 'bg-amber-900/30 border-r-4 border-amber-400' : 'hover:bg-gray-800/50'}`}
                                onClick={() => playTrack(track)}
                            >
                                <div className="flex items-center space-x-3 rtl:space-x-reverse min-w-0">
                                    <img 
                                        src={track.imageUrl || DEFAULT_COVER_IMAGE} 
                                        alt="cover" 
                                        className="h-10 w-10 object-cover rounded-lg flex-shrink-0 border border-gray-700"
                                        onError={(e) => { e.target.onerror = null; e.target.src = DEFAULT_COVER_IMAGE; }}
                                    />
                                    <div className="min-w-0">
                                        <p className={`font-medium truncate ${currentTrack?.id === track.id ? 'text-white' : 'text-gray-100'}`}>{track.title}</p>
                                        <p className="text-sm text-gray-400 truncate">{track.artist}</p>
                                    </div>
                                </div>
                                <span className={`text-xs font-mono p-1 rounded ${currentTrack?.id === track.id ? 'bg-amber-500 text-black font-semibold' : 'text-gray-400 bg-gray-700'}`}>
                                    {currentTrack?.id === track.id ? 'در حال پخش' : 'انتخاب'}
                                </span>
                            </li>
                        ))}
                    </ul>
                )}
            </div>
        </div>
    );
};

/**
 * Admin Panel for login and managing music.
 */
const AdminPanel = ({ db, setAdminLoggedIn, auth, musicList, adminLoggedIn }) => {
    const [username, setUsername] = useState('');
    const [password, setPassword] = useState('');
    const [loginError, setLoginError] = useState('');
    const [newTrack, setNewTrack] = useState({ title: '', artist: '', audioUrl: MOCK_AUDIO_URL, imageUrl: DEFAULT_COVER_IMAGE });
    const [uploadStatus, setUploadStatus] = useState('');
    const [editingTrack, setEditingTrack] = useState(null); 
    const [confirmingDeleteId, setConfirmingDeleteId] = useState(null); 

    const handleLogin = (e) => {
        e.preventDefault();
        setLoginError('');
        if (username === ADMIN_USERNAME && password === ADMIN_PASSWORD) {
            setAdminLoggedIn(true); 
        } else {
            setLoginError('نام کاربری یا رمز عبور اشتباه است.');
        }
    };

    const handleLogout = () => {
        signOut(auth).then(() => {
            setAdminLoggedIn(false);
        }).catch(error => {
            console.error("Logout error:", error);
        });
    };

    const handleTrackSubmit = async (e) => {
        e.preventDefault();
        if (!db || !newTrack.title || !newTrack.artist || !newTrack.audioUrl || !newTrack.imageUrl) {
            setUploadStatus('لطفاً تمام فیلدها را پر کنید.');
            return;
        }

        setUploadStatus('در حال آپلود...');
        try {
            const publicMusicPath = `artifacts/${appId}/public/data/${PUBLIC_MUSIC_COLLECTION}`;
            await addDoc(collection(db, publicMusicPath), {
                ...newTrack,
                createdAt: serverTimestamp(),
            });
            setNewTrack({ title: '', artist: '', audioUrl: MOCK_AUDIO_URL, imageUrl: DEFAULT_COVER_IMAGE });
            setUploadStatus('آهنگ با موفقیت اضافه شد!');
            setTimeout(() => setUploadStatus(''), 3000);
        } catch (e) {
            console.error("Error adding document: ", e);
            setUploadStatus('خطا در افزودن آهنگ.');
        }
    };
    
    const handleSaveEdit = async (e) => {
        e.preventDefault();
        if (!db || !editingTrack.title || !editingTrack.artist || !editingTrack.audioUrl || !editingTrack.imageUrl) {
            setUploadStatus('لطفاً تمام فیلدهای ویرایش را پر کنید.');
            return;
        }

        setUploadStatus('در حال ذخیره تغییرات...');
        try {
            const publicMusicPath = `artifacts/${appId}/public/data/${PUBLIC_MUSIC_COLLECTION}`;
            const trackRef = doc(db, publicMusicPath, editingTrack.id);
            
            const updateData = {
                title: editingTrack.title,
                artist: editingTrack.artist,
                audioUrl: editingTrack.audioUrl,
                imageUrl: editingTrack.imageUrl, 
            };

            await updateDoc(trackRef, updateData);
            
            setEditingTrack(null); 
            setUploadStatus('آهنگ با موفقیت به‌روزرسانی شد!');
            setTimeout(() => setUploadStatus(''), 3000);
        } catch (e) {
            console.error("Error updating document: ", e);
            setUploadStatus('خطا در به‌روزرسانی آهنگ.');
        }
    };

    const handleDeleteTrack = async (trackId) => {
        if (!db) return;
        
        // NOTE: Using a custom modal is recommended instead of native 'confirm()', 
        // but for this file's context, the logic to handle the double-click confirmation 
        // without an actual modal is kept as requested.
        
        if (confirmingDeleteId === trackId) {
            setConfirmingDeleteId(null); 
            setUploadStatus('در حال حذف آهنگ...');
            try {
                const publicMusicPath = `artifacts/${appId}/public/data/${PUBLIC_MUSIC_COLLECTION}`;
                const trackRef = doc(db, publicMusicPath, trackId);
                await deleteDoc(trackRef);
                setUploadStatus('آهنگ با موفقیت حذف شد.');
                setTimeout(() => setUploadStatus(''), 3000);
            } catch (e) {
                console.error("Error deleting document: ", e);
                setUploadStatus('خطا در حذف آهنگ.');
            }
        } else {
            setConfirmingDeleteId(trackId);
            setUploadStatus('برای تایید حذف، دوباره روی دکمه حذف کلیک کنید.');
            setTimeout(() => {
                setConfirmingDeleteId(null);
                setUploadStatus('');
            }, 5000);
        }
    };

    // --- Edit Modal UI ---
    if (editingTrack) {
        return (
            <div className="fixed inset-0 bg-black bg-opacity-70 z-50 flex items-center justify-center p-4" dir="rtl">
                <div className="bg-gray-900 p-8 rounded-xl shadow-2xl w-full max-w-lg space-y-6 transform transition-all border border-gray-800">
                    <h2 className="text-3xl font-bold text-amber-400 text-center border-b border-gray-700 pb-2">
                        ویرایش آهنگ: {editingTrack.title}
                    </h2>
                    <form onSubmit={handleSaveEdit} className="space-y-4">
                        <label className="block text-sm font-medium text-gray-300 pt-2">عنوان آهنگ</label>
                        <input
                            type="text"
                            placeholder="عنوان آهنگ"
                            value={editingTrack.title}
                            onChange={(e) => setEditingTrack({ ...editingTrack, title: e.target.value })}
                            className="w-full p-3 rounded-lg bg-gray-800 text-white placeholder-gray-400 focus:ring-amber-400 focus:border-amber-400"
                        />
                        <label className="block text-sm font-medium text-gray-300">نام هنرمند</label>
                        <input
                            type="text"
                            placeholder="نام هنرمند"
                            value={editingTrack.artist}
                            onChange={(e) => setEditingTrack({ ...editingTrack, artist: e.target.value })}
                            className="w-full p-3 rounded-lg bg-gray-800 text-white placeholder-gray-400 focus:ring-amber-400 focus:border-amber-400"
                        />
                        <label className="block text-sm font-medium text-gray-300">لینک فایل صوتی</label>
                        <input
                            type="text"
                            placeholder="لینک فایل صوتی"
                            value={editingTrack.audioUrl}
                            onChange={(e) => setEditingTrack({ ...editingTrack, audioUrl: e.target.value })}
                            className="w-full p-3 rounded-lg bg-gray-800 text-white placeholder-gray-400 focus:ring-amber-400 focus:border-amber-400"
                            dir="ltr"
                        />
                        <label className="block text-sm font-medium text-gray-300">لینک کاور موزیک</label>
                        <input
                            type="text"
                            placeholder="لینک کاور موزیک"
                            value={editingTrack.imageUrl}
                            onChange={(e) => setEditingTrack({ ...editingTrack, imageUrl: e.target.value })}
                            className="w-full p-3 rounded-lg bg-gray-800 text-white placeholder-gray-400 focus:ring-amber-400 focus:border-amber-400"
                            dir="ltr"
                        />
                        
                        {uploadStatus && (
                            <p className={`text-center p-2 rounded-lg text-sm ${uploadStatus.includes('خطا') ? 'bg-red-900 text-red-300' : 'bg-green-900 text-green-300'}`}>
                                {uploadStatus}
                            </p>
                        )}

                        <div className="flex justify-end space-x-3 rtl:space-x-reverse pt-4">
                            <button
                                type="button"
                                onClick={() => setEditingTrack(null)}
                                className="px-4 py-2 bg-gray-700 hover:bg-gray-600 text-white font-bold rounded-lg transition-colors"
                            >
                                لغو
                            </button>
                            <button
                                type="submit"
                                className="px-4 py-2 bg-amber-500 hover:bg-amber-400 text-black font-bold rounded-lg transition-colors"
                            >
                                ذخیره تغییرات
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        );
    }
    
    // --- Login Form UI ---
    if (!auth || !auth.currentUser || !adminLoggedIn) {
        return (
            <div className="p-4 sm:p-8 max-w-md mx-auto bg-gray-900 rounded-xl shadow-2xl space-y-6 border border-gray-800">
                <h2 className="text-3xl font-bold text-amber-400 text-center">ورود مدیر</h2>
                <form onSubmit={handleLogin} className="space-y-4">
                    <input
                        type="text"
                        placeholder="نام کاربری"
                        value={username}
                        onChange={(e) => setUsername(e.target.value)}
                        className="w-full p-3 rounded-lg bg-gray-800 text-white placeholder-gray-400 focus:ring-amber-400 focus:border-amber-400"
                        dir="ltr"
                    />
                    <input
                        type="password"
                        placeholder="رمز عبور"
                        value={password}
                        onChange={(e) => setPassword(e.target.value)}
                        className="w-full p-3 rounded-lg bg-gray-800 text-white placeholder-gray-400 focus:ring-amber-400 focus:border-amber-400"
                        dir="ltr"
                    />
                    {loginError && <p className="text-red-400 text-center text-sm">{loginError}</p>}
                    <button
                        type="submit"
                        className="w-full bg-amber-500 hover:bg-amber-400 text-black font-bold py-3 rounded-lg transition-colors transform hover:scale-[1.01]"
                    >
                        ورود به پنل
                    </button>
                </form>
            </div>
        );
    }

    // --- Management Panel UI (When logged in) ---
    return (
        <div className="p-4 sm:p-8 max-w-4xl mx-auto w-full space-y-8">
            <div className="flex justify-between items-center border-b border-gray-700 pb-4">
                <h1 className="text-3xl font-bold text-amber-400">پنل مدیریت Binyaz Music</h1>
                <button
                    onClick={handleLogout}
                    className="px-4 py-2 bg-red-600 hover:bg-red-500 text-white text-sm rounded-lg transition-colors"
                >
                    خروج
                </button>
            </div>

            {/* Upload New Track Form */}
            <div className="bg-gray-900 p-6 rounded-xl shadow-lg space-y-4 border border-gray-800">
                <h2 className="text-2xl font-semibold text-white">افزودن آهنگ جدید</h2>
                <p className="text-sm text-gray-400">توجه: در این محیط، فایل صوتی واقعی آپلود نمی‌شود. تنها فراداده (Metadata) آهنگ ذخیره می‌شود و از یک لینک پیش‌فرض برای پخش استفاده می‌گردد.</p>

                <form onSubmit={handleTrackSubmit} className="space-y-4">
                    <input
                        type="text"
                        placeholder="عنوان آهنگ"
                        value={newTrack.title}
                        onChange={(e) => setNewTrack({ ...newTrack, title: e.target.value })}
                        className="w-full p-3 rounded-lg bg-gray-800 text-white placeholder-gray-400 focus:ring-amber-400 focus:border-amber-400"
                    />
                    <input
                        type="text"
                        placeholder="نام هنرمند"
                        value={newTrack.artist}
                        onChange={(e) => setNewTrack({ ...newTrack, artist: e.target.value })}
                        className="w-full p-3 rounded-lg bg-gray-800 text-white placeholder-gray-400 focus:ring-amber-400 focus:border-amber-400"
                    />
                    <input
                        type="text"
                        placeholder="لینک فایل صوتی (اختیاری - پیش‌فرض: لینک آزمایشی)"
                        value={newTrack.audioUrl}
                        onChange={(e) => setNewTrack({ ...newTrack, audioUrl: e.target.value })}
                        className="w-full p-3 rounded-lg bg-gray-800 text-white placeholder-gray-400 focus:ring-amber-400 focus:border-amber-400"
                        dir="ltr"
                    />
                    <input
                        type="text"
                        placeholder="لینک کاور موزیک (اختیاری - پیش‌فرض: تصویر نمونه)"
                        value={newTrack.imageUrl}
                        onChange={(e) => setNewTrack({ ...newTrack, imageUrl: e.target.value })}
                        className="w-full p-3 rounded-lg bg-gray-800 text-white placeholder-gray-400 focus:ring-amber-400 focus:border-amber-400"
                        dir="ltr"
                    />
                    {uploadStatus && confirmingDeleteId === null && (
                        <p className={`text-center p-2 rounded-lg ${uploadStatus.includes('خطا') ? 'bg-red-900 text-red-300' : 'bg-green-900 text-green-300'}`}>
                            {uploadStatus}
                        </p>
                    )}
                    <button
                        type="submit"
                        className="w-full bg-amber-500 hover:bg-amber-400 text-black font-bold py-3 rounded-lg transition-colors transform hover:scale-[1.01]"
                    >
                        افزودن به لیست پخش
                    </button>
                </form>
            </div>

            {/* Existing Music List */}
            <div className="bg-gray-900 p-6 rounded-xl shadow-lg space-y-4 border border-gray-800">
                <h2 className="text-2xl font-semibold text-white">لیست آهنگ‌های فعلی ({musicList.length})</h2>
                <div className="text-gray-400 text-sm">لیست آهنگ‌ها در صفحه اصلی به ترتیب جدیدترین نمایش داده می‌شود.</div>
                <ul className="divide-y divide-gray-800">
                    {musicList.map((track) => (
                        <li key={track.id} className="flex justify-between items-center p-3 hover:bg-gray-800/50 rounded-lg">
                            <div className="flex items-center space-x-3 rtl:space-x-reverse min-w-0">
                                <img 
                                    src={track.imageUrl || DEFAULT_COVER_IMAGE} 
                                    alt="cover" 
                                    className="h-10 w-10 object-cover rounded-md flex-shrink-0 border border-gray-700"
                                    onError={(e) => { e.target.onerror = null; e.target.src = DEFAULT_COVER_IMAGE; }}
                                />
                                <div className="min-w-0">
                                    <p className="font-medium text-white truncate">{track.title} - {track.artist}</p>
                                    <p className="text-xs text-gray-500 truncate" dir="ltr">{track.audioUrl.substring(0, 50)}...</p>
                                </div>
                            </div>
                            
                            {/* Edit/Delete Buttons */}
                            <div className="flex space-x-2 rtl:space-x-reverse items-center">
                                <button
                                    onClick={() => setEditingTrack(track)}
                                    className="p-1 text-amber-400 hover:text-amber-300 transition-colors"
                                    title="ویرایش"
                                >
                                    <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z"></path></svg>
                                </button>

                                {confirmingDeleteId === track.id ? (
                                    <button
                                        onClick={() => handleDeleteTrack(track.id)}
                                        className="px-2 py-1 bg-red-600 text-white text-xs rounded-md hover:bg-red-500 transition-colors"
                                        title="تایید حذف"
                                    >
                                        تایید حذف
                                    </button>
                                ) : (
                                    <button
                                        onClick={() => handleDeleteTrack(track.id)}
                                        className="p-1 text-red-500 hover:text-red-400 transition-colors"
                                        title="حذف"
                                    >
                                        <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path></svg>
                                    </button>
                                )}
                            </div>
                        </li>
                    ))}
                </ul>
            </div>
        </div>
    );
};

/**
 * Main App Component
 */
const App = () => {
    const { db, auth, userId, isLoading } = useFirebase();
    const [view, setView] = useState('player'); 
    const [musicList, setMusicList] = useState([]);
    const [currentTrack, setCurrentTrack] = useState(null);
    const [adminLoggedIn, setAdminLoggedIn] = useState(false);


    if (isLoading) {
        return (
            <div className="min-h-screen bg-gray-950 flex items-center justify-center">
                <GlobalStyles /> {/* Rendered styles during loading */}
                <div className="animate-spin rounded-full h-16 w-16 border-t-4 border-b-4 border-amber-500"></div>
                <p className="text-white mr-4">در حال بارگیری...</p>
            </div>
        );
    }

    return (
        <div className="min-h-screen bg-gray-950 text-white font-sans" dir="rtl">
            <GlobalStyles /> {/* FIX: Rendering GlobalStyles as a component */}
            
            {/* Header Navigation */}
            <header className="bg-gray-900 shadow-xl sticky top-0 z-10 border-b border-amber-400/20">
                <nav className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-3 flex justify-between items-center">
                    <div className="flex items-center space-x-4 rtl:space-x-reverse">
                        <span className="text-2xl font-black text-amber-400 tracking-wider">Binyaz Music</span>
                    </div>
                    {view === 'admin' ? (
                        <button
                            onClick={() => setView('player')}
                            className="px-4 py-2 rounded-lg font-medium bg-amber-500 text-black hover:bg-amber-400 transition-colors shadow-md"
                        >
                            بازگشت به پخش
                        </button>
                    ) : (
                        <button 
                            onClick={() => setView('admin')}
                            className="p-1 rounded-full hover:bg-gray-800/50"
                            title="ورود مدیر"
                        >
                            <GearIcon />
                        </button>
                    )}
                </nav>
            </header>

            {/* Main Content */}
            <main className="min-h-[calc(100vh-64px)] p-4 sm:p-6 lg:p-8">
                {view === 'player' ? (
                    <MusicPlayer
                        db={db}
                        musicList={musicList}
                        setMusicList={setMusicList}
                        currentTrack={currentTrack}
                        setCurrentTrack={setCurrentTrack}
                    />
                ) : (
                    <AdminPanel
                        db={db}
                        setAdminLoggedIn={setAdminLoggedIn}
                        auth={auth}
                        musicList={musicList}
                        adminLoggedIn={adminLoggedIn}
                    />
                )}
            </main>

            {/* Footer: Contains the user ID info */}
            <footer className="p-4 bg-gray-900 text-center text-gray-500 text-sm border-t border-gray-800">
                <p>نسخه آزمایشی Binyaz Music - ساخته شده با React و Firebase.</p>
                <p className="mt-1">شناسه کاربری شما (برای ذخیره‌سازی): <span className="text-xs font-mono text-amber-400 break-all" dir="ltr">{userId}</span></p>
            </footer>
        </div>
    );
};

// --- React App Bootstrapping (moved from original main.jsx) ---

// اطمینان از تعریف متغیرهای محیطی برای اجرای محلی
if (typeof window.__firebase_config === 'undefined') {
  window.__firebase_config = '{}';
  window.__app_id = 'local-dev-app';
}

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
);
